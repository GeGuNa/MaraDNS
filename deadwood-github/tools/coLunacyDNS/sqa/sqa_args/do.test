#!/bin/bash
# Bashism: Job control

. ../testVars
PROG="../../coLunacyDNS"

cat > test.lua << EOF
bindIp = "127.7.7.21" 
logLevel = 1
coDNS.log("Read config file test.lua")
function processQuery(Q) -- Called for every DNS query received
  return {co1Type = "A", co1Data = "10.1.1.1"}
end
EOF

cat > bad.lua << EOF
This is not a valid Lua file
EOF

${PROG} | egrep '[A-Za-z0-9]' | grep -v version > output.test1 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1

${PROG} -d | egrep '[A-Za-z0-9]' | grep -v version | cut -f1 -d: \
	> output.test2 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1

${PROG} -d test.lua | egrep '[A-Za-z0-9]' | grep -v version > output.test3 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1
rm test.lua

${PROG} -foo | egrep '[A-Za-z0-9]' | grep -v version > output.test4 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1

${PROG} -d bad.lua | egrep '[A-Za-z0-9]' | grep -v version > output.test5 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1

${PROG} foo bar baz | egrep '[A-Za-z0-9]' | grep -v version > output.test6 &
sleep 1
LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill $process
done
sleep 1

if ! cmp output.success1 output.test1 > /dev/null 2>&1 ; then
        echo Args Test \#1 failed
        exit 255
fi
if ! cmp output.success2 output.test2 > /dev/null 2>&1 ; then
        echo Args Test \#2 failed
        exit 255
fi
if ! cmp output.success3 output.test3 > /dev/null 2>&1 ; then
        echo Args Test \#3 failed
        exit 255
fi
if ! cmp output.success4 output.test4 > /dev/null 2>&1 ; then
        echo Args Test \#4 failed
        exit 255
fi
if ! cmp output.success5 output.test5 > /dev/null 2>&1 ; then
        echo Args Test \#5 failed
        exit 255
fi
if ! cmp output.success6 output.test6 > /dev/null 2>&1 ; then
        echo Args Test \#6 failed
        exit 255
fi

echo Args test Success
rm output.test1
rm output.test2
rm output.test3
rm output.test4
rm output.test5
rm output.test6
